<!DOCTYPE html>
<html>
<head>
  <title>leaflet-map-simple</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta charset="utf-8">

  <!-- Load Leaflet code library: see https://leafletjs.com/download.html -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css" integrity="sha256-sA+zWATbFveLLNqWO2gtiw3HL/lh1giY/Inf1BJ0z14=" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js" integrity="sha256-o9N1jGDZrf5tS+Ft4gbIK7mYMipq9lqpVJ91xHSyKhg=" crossorigin=""></script>

  <!-- Position the map and title with Cascading Style Sheet (CSS) -->
  <style>
  body { margin:0; padding:0; }
  #map { position: absolute; top:0; bottom:0; right:0; left:0; }
  #map-title { position: relative; margin-top: 10px; margin-left: 50px; float: left; background: white; border: 2px solid rgba(0,0,0,0.2); padding: 6px 8px; font-family: Helvetica; font-weight: bold; font-size: 24px; z-index: 800; }
  </style>
</head>
<body>

  <!-- Display the map and title with HTML division tags  -->
  <div id="map-title">EDIT map title</div>
  <div id="map"></div>

  <!-- Create the interactive map content with JavaScript (.js) -->
  <script>

  /* Set up the initial map center and zoom level */
  var map = L.map('map', {
    center: [41.77, -72.69], // EDIT coordinates to re-center map
    zoom: 12,  // EDIT from 1 (zoomed out) to 18 (zoomed in)
  });

  /* display basemap tiles -- see others at https://leaflet-extras.github.io/leaflet-providers/preview/ */
  L.tileLayer(
    'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://osm.org/copyright">\
        OpenStreetMap</a> contributors, &copy;\
        <a href="https://carto.com/attribution">CARTO</a>'
  }).addTo(map);


    // placeholders for the L.marker and L.circle representing user's current position and accuracy    
    var current_position, current_accuracy;

    function onLocationFound(e) {
      // if position defined, then remove the existing position marker and accuracy circle from the map
      if (current_position) {
          map.removeLayer(current_position);
          map.removeLayer(current_accuracy);
      }

      var radius = e.accuracy / 2;
      current_position = L.marker(e.latlng, {draggable:'true'}).addTo(map);
  current_position.on('dragend', function(event){
    var marker = event.target;
    var position = marker.getLatLng();
    map.panTo(new L.LatLng(position.lat, position.lng))
  });
    }

    function onLocationError(e) {
callWs = function(){
	// The Endpoint URL
	let url = 'https://ipinfo.io/json'
	fetch(url)
  .then(function(response) {
  	// Render the Response Status
    // Parse the body as JSON
    return response.json();
  })
  .then(function(json) {
  	// Render the parsed body
      e.latlng = new L.latLng(json.loc.split(','));
      map.panTo(e.latlng);
      e.accuracy = 100;
      onLocationFound(e);
  })
}
callWs();
    }

    map.on('locationfound', onLocationFound);
    map.on('locationerror', onLocationError);

    // wrap map.locate in a function    
    function locate() {
      map.locate({setView: true, maxZoom: 16});
    }

    locate();
  </script>
</body>
</html>
